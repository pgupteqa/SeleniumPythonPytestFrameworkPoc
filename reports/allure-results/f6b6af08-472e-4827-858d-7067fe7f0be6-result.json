{"name": "test_loginsalesforce_validcredentials[test_list_item0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=137.0.7151.104)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff606fbfe75+79173]\n\tGetHandleVerifier [0x0x7ff606fbfed0+79264]\n\t(No symbol) [0x0x7ff606d79e5a]\n\t(No symbol) [0x0x7ff606d65c25]\n\t(No symbol) [0x0x7ff606d8ac44]\n\t(No symbol) [0x0x7ff606e003c5]\n\t(No symbol) [0x0x7ff606e20922]\n\t(No symbol) [0x0x7ff606df8743]\n\t(No symbol) [0x0x7ff606dc14c1]\n\t(No symbol) [0x0x7ff606dc2253]\n\tGetHandleVerifier [0x0x7ff60728a2ad+3004797]\n\tGetHandleVerifier [0x0x7ff6072846fd+2981325]\n\tGetHandleVerifier [0x0x7ff6072a3350+3107360]\n\tGetHandleVerifier [0x0x7ff606fda9fe+188622]\n\tGetHandleVerifier [0x0x7ff606fe228f+219487]\n\tGetHandleVerifier [0x0x7ff606fc8dc4+115860]\n\tGetHandleVerifier [0x0x7ff606fc8f79+116297]\n\tGetHandleVerifier [0x0x7ff606faf528+11256]\n\tBaseThreadInitThunk [0x0x7ffcdfade8d7+23]\n\tRtlUserThreadStart [0x0x7ffce1c1c34c+44]", "trace": "self = <testcases.login_test.TestLogin object at 0x00000270A04D6990>\ntest_list_item = {'password': 'Pra245pte#', 'username': 'pgbitbucket706@agentforce.com'}\n\n    @pytest.mark.flaky(reruns=2)\n    @pytest.mark.smoke\n    @pytest.mark.parametrize(\"test_list_item\", BaseTest.get_data_from_json(logintest_data_path,\"valid_login\"))\n    def test_loginsalesforce_validcredentials(self,test_list_item):\n        loginpage = LoginPage(self.driver)\n        homepage = loginpage.logintosalesforce(test_list_item[\"username\"],test_list_item[\"password\"])\n>       homepage.verify_page_title()\n\ntestcases\\login_test.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\homePage.py:14: in verify_page_title\n    pagetitle = self.getTitle()\n                ^^^^^^^^^^^^^^^\nutility\\pageutils.py:16: in getTitle\n    return self.driver.title\n           ^^^^^^^^^^^^^^^^^\nC:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:483: in title\n    return self.execute(Command.GET_TITLE).get(\"value\", \"\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000270A05501A0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...ff606faf528+11256]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffcdfade8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffce1c1c34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=137.0.7151.104)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff606fbfe75+79173]\nE       \tGetHandleVerifier [0x0x7ff606fbfed0+79264]\nE       \t(No symbol) [0x0x7ff606d79e5a]\nE       \t(No symbol) [0x0x7ff606d65c25]\nE       \t(No symbol) [0x0x7ff606d8ac44]\nE       \t(No symbol) [0x0x7ff606e003c5]\nE       \t(No symbol) [0x0x7ff606e20922]\nE       \t(No symbol) [0x0x7ff606df8743]\nE       \t(No symbol) [0x0x7ff606dc14c1]\nE       \t(No symbol) [0x0x7ff606dc2253]\nE       \tGetHandleVerifier [0x0x7ff60728a2ad+3004797]\nE       \tGetHandleVerifier [0x0x7ff6072846fd+2981325]\nE       \tGetHandleVerifier [0x0x7ff6072a3350+3107360]\nE       \tGetHandleVerifier [0x0x7ff606fda9fe+188622]\nE       \tGetHandleVerifier [0x0x7ff606fe228f+219487]\nE       \tGetHandleVerifier [0x0x7ff606fc8dc4+115860]\nE       \tGetHandleVerifier [0x0x7ff606fc8f79+116297]\nE       \tGetHandleVerifier [0x0x7ff606faf528+11256]\nE       \tBaseThreadInitThunk [0x0x7ffcdfade8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffce1c1c34c+44]\n\nC:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "parameters": [{"name": "test_list_item", "value": "{'username': 'pgbitbucket706@agentforce.com', 'password': 'Pra245pte#'}"}], "start": 1750010257302, "stop": 1750010363823, "uuid": "302fde74-14a1-497e-b77f-1103f69d51ec", "historyId": "4fa26c5d8a8f3f216283ca707f04bde8", "testCaseId": "edd327156eda62a83bae9df650959eeb", "fullName": "testcases.login_test.TestLogin#test_loginsalesforce_validcredentials", "labels": [{"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "login_test"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "LAPTOP-QPHGE425"}, {"name": "thread", "value": "22780-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.login_test"}]}