{"name": "test_loginsalesforce_validcredentials[test_list_item0]", "status": "broken", "statusDetails": {"message": "TypeError: You must provide login information or an instance and token", "trace": "self = <testcases.login_test.TestLogin object at 0x000001E28F71DA90>, test_list_item = {'password': 'Pra245pte#', 'username': 'pgbitbucket706@agentforce.com'}\n\n    @pytest.mark.flaky(reruns=2)\n    @pytest.mark.smoke\n    @pytest.mark.parametrize(\"test_list_item\", BaseTest.get_data_from_json(Login_test_data_path,\"valid_login\"))\n    def test_loginsalesforce_validcredentials(self, test_list_item):\n        loginpage = LoginPage(self.driver)\n        homepage = loginpage.logintosalesforce(test_list_item[\"username\"],test_list_item[\"password\"])\n        homepage.verify_page_title()\n>       homepage.verify_contact_details_by_lastname()\n\ntestcases\\login_test.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\homePage.py:21: in verify_contact_details_by_lastname\n    contact_details = sf_utils.get_contact_detail_by_lastname('Young',10)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nutility\\salesforce_data_utils.py:29: in get_contact_detail_by_lastname\n    sf_auth = self.authenticate_salesforce()\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nutility\\salesforce_data_utils.py:21: in authenticate_salesforce\n    self.sf = Salesforce(instance_url=self.sf_url, username=self.sf_username,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <simple_salesforce.api.Salesforce object at 0x000001E28F7D6AD0>, username = None, password = None, security_token = None, session_id = None, instance = None\ninstance_url = None, organizationId = None, version = '59.0', proxies = None, session = None, client_id = None, domain = 'login', consumer_key = None, consumer_secret = None\nprivatekey_file = None, privatekey = None, parse_float = None, object_pairs_hook = <class 'collections.OrderedDict'>\n\n    def __init__(\n            self,\n            username: Optional[str] = None,\n            password: Optional[str] = None,\n            security_token: Optional[str] = None,\n            session_id: Optional[str] = None,\n            instance: Optional[str] = None,\n            instance_url: Optional[str] = None,\n            organizationId: Optional[str] = None,\n            version: Optional[str] = DEFAULT_API_VERSION,\n            proxies: Optional[Proxies] = None,\n            session: Optional[requests.Session] = None,\n            client_id: Optional[str] = None,\n            domain: Optional[str] = None,\n            consumer_key: Optional[str] = None,\n            consumer_secret: Optional[str] = None,\n            privatekey_file: Optional[str] = None,\n            privatekey: Optional[str] = None,\n            parse_float: Optional[Callable[[str], Any]] = None,\n            object_pairs_hook: Optional[Callable[[List[Tuple[Any, Any]]], Any]]\n            = OrderedDict,\n            ):\n    \n        \"\"\"Initialize the instance with the given parameters.\n        Available kwargs\n        Password Authentication:\n        * username -- the Salesforce username to use for authentication\n        * password -- the password for the username\n        * security_token -- the security token for the username\n        * domain -- The domain to using for connecting to Salesforce. Use\n                    common domains, such as 'login' or 'test', or\n                    Salesforce My domain. If not used, will default to\n                    'login'.\n    \n        OAuth 2.0 Connected App Token Authentication:\n        * consumer_key -- the consumer key generated for the user\n        * consumer_secret -- the consumer secret generated for the user\n    \n        OAuth 2.0 JWT Bearer Token Authentication:\n        * consumer_key -- the consumer key generated for the user\n    \n        Then either\n        * privatekey_file -- the path to the private key file used\n                             for signing the JWT token\n        OR\n        * privatekey -- the private key to use\n                         for signing the JWT token\n    \n        Direct Session and Instance Access:\n    \n        * session_id -- Access token for this session\n    \n        Then either\n        * instance -- Domain of your Salesforce instance, i.e.\n          `na1.salesforce.com`\n        OR\n        * instance_url -- Full URL of your instance i.e.\n          `https://na1.salesforce.com\n    \n        Universal Kwargs:\n        * version -- the version of the Salesforce API to use, for example\n                     `29.0`\n        * proxies -- the optional map of scheme to proxy server\n        * session -- Custom requests session, created in calling code. This\n                     enables the use of requests Session features not otherwise\n                     exposed by simple_salesforce.\n        * parse_float -- Function to parse float values with. Is passed along to\n                         https://docs.python.org/3/library/json.html#json.load\n        * object_pairs_hook -- Function to parse ordered list of pairs in json.\n                               To use python 'dict' change it to None or dict.\n        \"\"\"\n    \n        if domain is None:\n            domain = 'login'\n    \n        # Determine if the user passed in the optional version and/or\n        # domain kwargs\n        self.sf_version = version\n        self.domain = domain\n        self.session = session or requests.Session()\n        self.proxies = self.session.proxies\n        self._salesforce_login_partial = None\n        # override custom session proxies dance\n        if proxies is not None:\n            if not session:\n                self.session.proxies = self.proxies = proxies\n            else:\n                logger.warning(\n                    'Proxies must be defined on custom session object, '\n                    'ignoring proxies: %s',\n                    proxies\n                    )\n    \n        # Determine if the user wants to use our username/password auth or pass\n        # in their own information\n        if all(arg is not None for arg in (\n                username, password, security_token)\n               ):\n            self.auth_type = \"password\"\n    \n            # Pass along the username/password to our login helper\n            self._salesforce_login_partial = partial(\n                SalesforceLogin,\n                session=self.session,\n                username=username,\n                password=password,\n                security_token=security_token,\n                sf_version=self.sf_version,\n                proxies=self.proxies,\n                client_id=client_id,\n                domain=self.domain\n                )\n            self._refresh_session()\n    \n        elif all(arg is not None for arg in (\n                session_id, instance or instance_url)\n                 ):\n            self.auth_type = \"direct\"\n            self.session_id: str = cast(str,\n                                        session_id\n                                        )\n    \n            # If the user provides the full url (as returned by the OAuth\n            # interface for example) extract the hostname (which we rely on)\n            if instance_url is not None:\n                self.sf_instance: str = urlparse(\n                    instance_url\n                    ).hostname  # type: ignore[assignment]\n                port = urlparse(instance_url).port\n                if port not in (None, 443):\n                    self.sf_instance += f':{port}'\n            else:\n                self.sf_instance = cast(str,\n                                        instance\n                                        )\n    \n            # Only generate the headers wihtout logging in first\n            self._generate_headers()\n    \n        elif all(arg is not None for arg in (\n                username, password, organizationId)\n                 ):\n            self.auth_type = 'ipfilter'\n    \n            # Pass along the username/password to our login helper\n            self._salesforce_login_partial = partial(\n                SalesforceLogin,\n                session=self.session,\n                username=username,\n                password=password,\n                organizationId=organizationId,\n                sf_version=self.sf_version,\n                proxies=self.proxies,\n                client_id=client_id,\n                domain=self.domain\n                )\n            self._refresh_session()\n    \n        elif all(arg is not None for arg in (\n                username, password, consumer_key, consumer_secret)\n                 ):\n            self.auth_type = \"password\"\n    \n            # Pass along the username/password to our login helper\n            self._salesforce_login_partial = partial(\n                SalesforceLogin,\n                session=self.session,\n                username=username,\n                password=password,\n                consumer_key=consumer_key,\n                consumer_secret=consumer_secret,\n                proxies=self.proxies,\n                domain=self.domain\n                )\n            self._refresh_session()\n    \n        elif all(arg is not None for arg in (\n                username, consumer_key, privatekey_file or privatekey)\n                 ):\n            self.auth_type = \"jwt-bearer\"\n    \n            # Pass along the username/password to our login helper\n            self._salesforce_login_partial = partial(\n                SalesforceLogin,\n                session=self.session,\n                username=username,\n                instance_url=instance_url,\n                consumer_key=consumer_key,\n                privatekey_file=privatekey_file,\n                privatekey=privatekey,\n                proxies=self.proxies,\n                domain=self.domain\n                )\n            self._refresh_session()\n        elif all(arg is not None for arg in (\n                consumer_key, consumer_secret, domain\n                )\n                 ):\n            self.auth_type = \"client-credentials\"\n            self._salesforce_login_partial = partial(\n                SalesforceLogin,\n                session=self.session,\n                consumer_key=consumer_key,\n                consumer_secret=consumer_secret,\n                proxies=self.proxies,\n                domain=self.domain\n                )\n            self._refresh_session()\n        else:\n>           raise TypeError(\n                'You must provide login information or an instance and token'\n                )\nE           TypeError: You must provide login information or an instance and token\n\nC:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\simple_salesforce\\api.py:250: TypeError"}, "parameters": [{"name": "test_list_item", "value": "{'username': 'pgbitbucket706@agentforce.com', 'password': 'Pra245pte#'}"}], "start": 1750237308400, "stop": 1750237316976, "uuid": "adecbf71-b3e5-4dd1-87d1-427ab89a75a5", "historyId": "4fa26c5d8a8f3f216283ca707f04bde8", "testCaseId": "edd327156eda62a83bae9df650959eeb", "fullName": "testcases.login_test.TestLogin#test_loginsalesforce_validcredentials", "labels": [{"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "login_test"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "LAPTOP-QPHGE425"}, {"name": "thread", "value": "22984-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.login_test"}]}